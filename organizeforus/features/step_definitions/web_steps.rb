# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end
When /^(?:|he )press "([^"]*)"$/ do |button|
  click_button(button)
end
When /^(?:|he )follow "([^"]*)"$/ do |link|
   click_link(link)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end


When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end
Then /^(?:|he )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

When('I create the following user:') do |table|
  attributes=table.rows_hash
  visit new_user_registration_path
  fill_in "Name", with: attributes['Name']
  fill_in "Surname", with: attributes['Surname']
  fill_in "Username", with: attributes['Username']
  fill_in "Birthday", with: attributes['Birthday']
  fill_in "Email", with: attributes['Email']
  fill_in "Password", with: attributes['Password']
  fill_in "Password confirmation", with: attributes['Password confirmation']
  click_on "Sign up"
end

Then('I should have the following user:') do |table|
  puts table
  table.diff!(User.all.map(&:attributes))
end
And('I try works') do
  puts User.last.sign_in_count
  puts User.last.email
end

When('I follow Sign up') do 
  visit new_user_registration_path
end

Given('There is a user') do 
  User.create(id: 45, name: "ale", surname:"v", birthday: "2000-06-06", username: "ok", email: "al@gm.com", password: "ciaociao")
end

When('I try to logged the user in') do
  visit new_user_session_path
  fill_in "Email", with: "al@gm.com"
  fill_in "Password", with: "ciaociao"
  click_on "Log in"
end


And('I press Create group') do
  visit new_group_path
end

Given('There is another user with an account') do
  user=User.create(id: 13, name: "al", surname:"v", birthday: "2000-06-07", username: "user2", email: "alex@gm.com", password: "ciaociao")
end

Given('the show page of a specific group') do
  group=Group.create(id: 10, name: "GroupoWork", description: "Descrizione Gruppo" , work: true, fun: false, created: "t", user_id: 45, date_of_start: "2022-08-21", date_of_end: "2022-08-25", hours: 10,start_hour:"08:00:00",end_hour:"17:00:00")
  visit group_path(group)
end

Then('I move to the Posts section') do
  visit group_posts_path(Group.find(10))
end

Then('I create post with title Post1 and body Description') do
  post=Group.find(10).posts.build(id: 12 , title: "Post1", body: "Description", user_id: 45 )
  post.save!
  visit group_post_path(Group.find(10),post)
end

Then('I test the function') do
  puts Group.last.name
  puts Group.last.description
  puts Group.last.user_id
  puts "Start"
  puts Group.last.date_of_start
end

Then('I create post with title Post1 and body empty') do
  post=Group.find(10).posts.build(id: 9 , title: "Post1", body: "", user_id: 45 )
  if !post.save
      true
  end
end
Then('It should go wrong') do
  if Post.exists?(9) == false
    true
  end
end

Then('I test the function p2') do
  puts Group.last.date_of_start
end

Then('I move to the Surveys section') do
  visit index_survey_path(Group.find(10))
end

And('I press New') do 
  group=Group.find(10)
  visit new_survey_path(group,group.user)
end

And('I press Google') do
  post user_google_oauth2_omniauth_authorize_path
end

Given('There is another user') do
  User.create(id: 13, name: "al", surname:"v", birthday: "2000-06-07", username: "ok", email: "alex@gm.com", password: "ciaociao")
end

When('I try to logged the another user in') do
  visit new_user_session_path
  fill_in "Email", with: "alex@gm.com"
  fill_in "Password", with: "ciaociao"
  click_on "Log in"
end


Then /^(?:|he )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

And('he is a member of a group') do 
  user=User.create(id: 45, name: "ale", surname:"v", birthday: "2000-06-06", username: "alexok", email: "al@gm.com", password: "ciaociao")
  group=Group.create(id: 10, name: "GroupoWork", description: "Descrizione Gruppo" , work: true, fun: false, created: "t", user_id: 45, date_of_start: "2022-08-21", date_of_end: "2022-08-25", hours: 10, start_hour:"08:00:00",end_hour:"17:00:00")
  part= Partecipation.create(group_id: group.id, user_id: 13, accepted: true, necessary: false)

end 
And('he move into the group') do 
  visit group_url(Group.find(10))
end

Then('I press DestroyGroupWork') do
    find()
    Group.find(10).destroy
    visit root_path
end


Given('There is another user without an account') do
  
end

