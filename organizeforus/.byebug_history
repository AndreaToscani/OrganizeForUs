quit
@event.user != current_user
!members.include?(current_user) || @event.user != current_user
members.include?( current_user)
members
!members.include?( current_user)
!members.include?(User.find_by(email: current_user.email))
!members.include?(User.find_by(current_user.email))
current_user.email
members.where(email: "org")
members.where(email: org)
members.each do |m| puts m.email end
members.each do |m| puts m end
members
current_user
members
!members.include?(current_user)
quit
members.include?(User.last)
members.include?(User.first)
members.include(User.first)
members 
quit
slot
@slots
quit
@slots
slots
quit
c
dataF
dataI
c
dataF
dataI
quit
@event.position
@position
@event
Event.last
quit
position_params.nil?
position_params.empty?
position_params
quit
@position.longitude
@position.latitude
@position
@event
event
quit
c
quit
position_params
params[:position]
params[:event]
event_params
quit
event_params
quit
event_params
quit
event_params[:position]
event_params[:position
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event[:members].map{|t| {email: t.strip}}
event[:members].map{|t| {email: t.string}}
event[:members].class
event[:members]
quit
event_params[:members].class
event_params[:members]
event_params
quit
params[:event][:members]
params[:event].member
params[:event].members
params[:event]
[:event]
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
c
email
:email
part
members
:members
c
part.email
:members[]
:members
p
members
part
quit
quit 
compute_total_hours(merged_t_slots)
merged_t_slots
quit
members
compute_total_hours(merged_t_slots)
merged_t_slots
merge_t_slots
q
merged_t_slots
q
qÃ¹
merged_t_slots.second
merged_t_slots
q
merged_t_slots.second
merged_t_slots.first
merged_t_slots
merged_slots
c
next
q
dataI.class
dataI
dataF
dataR
q
merged_t_slots
q
duration
hF
hI
dataF
dataI
group
t_slots
t_slot
slot
members
merged_t_slots
q
events.items
events
q
data.to_datetime.day
data.to_datetime.class == DateTime
data.to_datetime.class
data.to_datetime.class == 'DateTime'
data.to_datetime.class 
data.to_datetime.class == 'datetime'
data.to_datetime.class == 'datetiem'
(data+"16.07").to_datetime
(data+"16:07").to_datetime
data.to_datetime.DIOCANE
data.to_datetime.date
data.to_datetime
data.class
h
data
dt
q
merged_t_slots
q
res
c
q
res
c
next
c
q
res
c
q
c
r
res
c
q
res
r
c
r
c
r
q
res
c
r
res
c
res
r
q
c
q
dd
c
r
res
q
slots
member
members
r
res
q
y
q
r
res
q
r
res
q
r
k
k = r.delete([r.first.first,r.first.second])
r.delete([r.first.first,r.first.second])
r.include?([r.first.first,r.first.second])
r.include([r.first.first,r.first.second])?
[r.first.first,r.first.second].is_in(r)
[r.first.first,r.first.second].in(r)
[r.first.first,r.first.second]
  r - [r.first.first,r.first.second]
r
dd
cc
bb
aa
res
q
res
r - [cc,dd]
r
continue!
dd
cc
bb
