c
response
c
url
response
c
response
c
response
c
n
response
json
url = json[:html_url]
n
c
300 = "300"
300 == "300"
300 === "300"
300 === "300Â£
eval(299.to_s)
eval("299".to_s)
eval(299)
eval(response.code) === 201
response.code === 201
response.code == 201
response.code
n
response.code
n
c
response = https.request(request)
    request["Authorization"] = "token #{token}"
token = current_user.gh_access_token
    request["Authorization"] = "token #{token}"
response = https.request(request)
request.body = {name: @group.name+Group.diff, private: true}.to_json
    request["Accept"] = 'application/vnd.github+json'
    request["Content-Type"] = 'application/json'
    request["Authorization"] = "token #{@token}"
    request = Net::HTTP::Post.new(url)
    https.use_ssl = true
https = Net::HTTP.new(url.host, url.port)
url = URI.parse("https://api.github.com/user/repos")
https = Net::HTTP.new(url.host, url.port)
response = https.request(request)
url = URI.parse("https://api.github.com/user/repos")
response = https.request(request)
request.body = {name: @group.name+Group.diff, private: true}.to_json
request["Accept"] = 'application/vnd.github+json'
request["Content-Type"] = 'application/json'
request["Authorization"] = "token #{@current_user.gh_access_token}"
request = Net::HTTP::Post.new(url)
https = Net::HTTP.new(url.host, url.port)
url = URI("https://api.github.com/user/repos")
q
dataR.to_datetime < dataF.to_datetime
dataR.to_datetime <= dataF.to_datetime
"2022-09-08"
dataF
dataR < dataF
dataR
continue
dataR
continue
dataR
continue
dataR
continue
dataR
continue
c
dataR
dataF
n
dataF
dataR
n
dataF
dataR
q
dataF
dataR
q
duration
hF
hI
dataF
dataI
group
q
620/60.to_i
599%60
600%60
tm
variables
th + 2
th
th%60
tm.round(2)
tm
th 
c
json[:errors][0][:message]
json[:errors][0].message
json[:errors][0]
json[:errors][:message]
json[:errors]
json[:message]
json.message
json.first
json = JSON.parse(response.body, symbolize_names: true)
response.body.message
response.body
response = https.request(request)
request["Authorization"]
request.["Authorization"]
request.first
request.to_h
request.key
request.keys
request.content
request.body
request
response = https.request(request)
response.code
response
json
json[:html_url]
json.keys
json
r.parsed_response[0]
r.parsed_response[0]["contributors_url"]
r.parsed_response[0]["html_url"]
r.parsed_response[0].keys
r.parsed_response[0][:html_url]
r.parsed_response[0].html_url
r.parsed_response[0].keys
r.parsed_response[0]
j[0].keys
j[1]
j[0]
j[:id]
j.to_h
j
r.body
r.parsed_response.class
r.parsed_response.classs
r.parsed_response.to_h
r.parsed_response["id"]
r.parsed_response[:id]
r.parsed_response.to_h
r.parsed_response.keys
r.parsed_response
 url = URI("https://api.github.com/user/repos")r.parsed_response.keys
r.parsed_response
r.keys
r.to_h
r.type
r
r.keys
j = JSON.parse(r.body, symbolize_names: true)
r.body
r = HTTParty.get(json[:owner][:repos_url])
HTTParty.get(json[:owner][:repos_url])
json[:owner][:repos_url]
json[:owner]
json.owner
json.keys
json[:node_id]
json
json[:repos_url]
json[:git_url]
json.git_url
json.git_
json.git
json.repo
json.keys
json.keys.find(/repo/)
json.keys | grep
json.keys | grep :repo
json.keys | grep repo
json.keys
json = JSON.parse(response.body, symbolize_names: true)
response.parsed_response
response.body
response.body.to_s.to_h
response.body.to_h
response
response.to_s
response.to_s.to_r
response.to_s.to_h
response.to_h
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, body:{name: "palla", private: true}.to_json)
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{name: "palla", private: true}.to_json)
response = https.request(request)
request.body = {name: "palla", private: true}.to_json
response = https.request(request)
request.body = {name: "palla", private: true}
request["Accept"] = 'application/vnd.github+json'
request["Content-Type"] = 'application/json'
request["Content-Type"] = "text/plain"
request["Authorization"] = "token #{token}"
request = Net::HTTP::Post.new(url)
      https.use_ssl = true
 https = Net::HTTP.new(url.host, url.port)
url = URI("https://api.github.com/user/repos")
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{name: "palla", private: true})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{name: "palla", private: true}, verbose=>true)
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{name: "palla", private: true}, verbose=true)
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data=>{name: "palla", private: true})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{name: "palla", private: true})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, data:{'name': "palla", 'private': true})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, body:{'name': "palla", 'private': true})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"}, body:{'name': "palla", 'private': "true"})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "Bearer #{token}"}, )
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"})
token = auth.credentials.token
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos", headers: {'Content-Type': 'application/json','Accept': 'application/vnd.github+json', 'Authorization': "token #{token}"})
RestClient::Request.execute(method: :post,url: "https://api.github.com/user/repos")
c
session["devise.google_oauth2"] = nil
session["devise.google_oauth2"]
session.first
session.second
session.keys
session
DateTime.rfc3339("1970-01-01T00:00:00Z") + auth.credentials.expires_at.seconds
DateTime.rfc3339("1970-01-01T00:00:00Z") + auth.credentials.expires_at
auth.credentials
auth.credentials.keys
auth.keys
c
auth.credentials
auth.extra.raw_info.keys
auth.extra.raw_info
auth.extra.scope
auth.extra.keys
auth.extra.all_emails
auth.extra.all_emails.keys
auth.extra.all_email.keys
auth.extra.keys
auth.keys
auth.credentials.keys
c
params
c
params[:_method]
params
c
user_signed_in?
c
params
del
c
