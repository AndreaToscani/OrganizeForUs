c
auth.info.name
auth.info.keys.name
auth.info.keys
auth.info
auth.keys
user
c
user.email
c
auth
c
auth
c
auth.info.keys
auth
c
auth
auth.info.keys
auth.info
c
auth
auth.info.keys
c
auth.info.keys
auth.info.email
c
auth.info.email
auth
c
Controller
atncz = request.env["omniauth.auth"]
User.from_omniauth(request.env["omniauth.auth"])
auth
auth.extra.raw_info.keys
auth.extra.keys.raw_info
auth.extra.keys.raw_info.keys
auth.extra.keys
auth.credentials.keys
auth.keys
auth.info.email
auth.info.keys
user.email
c
current_user.current_sign_in_ip
current_user
Controller.current_user
c
auth.info
auth.info.profile_url
c
user
c
auth.name
auth.info.keys
auth.extra.raw_info.firstName.keys
auth.extra.raw_info.firstName
auth.extra.raw_info
auth.extra.raw_info.keys
auth.extra.keys
auth.keys.credentials
auth.keys
auth
c
self.email
self.username
@login
c
where(conditions).where(["username = :value OR lower(email) = lower(:value)", { :value => login }]).first
@login
login = conditions.delete(:login)
 conditions = warden_conditions.dup
where(conditions).where(["username = :value OR lower(email) = lower(:value)", { :value => login }]).first
warden_conditions
c
warden_conditions
warden_condition
login
@login
authentication_keys
c
authentication_key
authentication_keys
@login || self.username || self.email
list
vars
session
user
self
self.email
self.username
@login || self.username
@login
quit
dataI
datetimeI
dataI
datetimeI
events
hI
dataI
datetimeI
dateTimeI
quit
@event.user != current_user
!members.include?(current_user) || @event.user != current_user
members.include?( current_user)
members
!members.include?( current_user)
!members.include?(User.find_by(email: current_user.email))
!members.include?(User.find_by(current_user.email))
current_user.email
members.where(email: "org")
members.where(email: org)
members.each do |m| puts m.email end
members.each do |m| puts m end
members
current_user
members
!members.include?(current_user)
quit
members.include?(User.last)
members.include?(User.first)
members.include(User.first)
members 
quit
slot
@slots
quit
@slots
slots
quit
c
dataF
dataI
c
dataF
dataI
flash
flash[:alert]
flash[alert]
Flash[alert]
Identity.providers_list.include?(params[:provider])
c
flash[:notice]
flash[:alert]
c
 flash[:notice] << "Seriously... You're not allowed..."
flash[:notice] << "You're not allowed..."
flash[:notice] = []
c
flash[:notice] << "ciao"
flash[:notice]
flash
c
/mnt/c/Users/ema_l/Documents/GitHub/OrganizeForUs/organizeforus/c
/mnt/c/Users/ema_l/Documents/GitHub/OrganizeForUs/organizeforus
c
params
c
n
s
c
   154:         elsif  params[:user].nil?
   153:             redirect_to profile_path, notice: "Nothing changed ;)" unless Identity.providers_list.include?(params[:provider])
   152:             redirect_to profile_path, notice: "You fockin brat!" unless current_user.id === eval(params[:id])
   151:             allowed_params = [:id, :provider]
if user_signed_in?
user_signed_in?
if user_signed_in?
c
params.require(:user)
params[:user].nil?
params[:user]
params.id
params.user
params
c
$(document)
<script> 
$
quit
@event.position
@position
@event
Event.last
quit
position_params.nil?
position_params.empty?
position_params
quit
@position.longitude
@position.latitude
@position
@event
event
quit
c
quit
position_params
params[:position]
params[:event]
event_params
quit
event_params
quit
event_params
quit
event_params[:position]
event_params[:position
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event[:members].map{|t| {email: t.strip}}
event[:members].map{|t| {email: t.string}}
event[:members].class
event[:members]
quit
event_params[:members].class
event_params[:members]
event_params
quit
params[:event][:members]
params[:event].member
params[:event].members
params[:event]
[:event]
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
quit
event_params
c
email
:email
part
members
:members
c
part.email
:members[]
:members
p
members
part
quit
quit 
compute_total_hours(merged_t_slots)
merged_t_slots
quit
members
compute_total_hours(merged_t_slots)
merged_t_slots
merge_t_slots
q
merged_t_slots
q
q√π
merged_t_slots.second
merged_t_slots
q
merged_t_slots.second
merged_t_slots.first
merged_t_slots
merged_slots
c
next
q
dataI.class
dataI
dataF
dataR
q
merged_t_slots
q
duration
hF
hI
dataF
dataI
group
t_slots
t_slot
slot
members
merged_t_slots
q
events.items
events
q
data.to_datetime.day
data.to_datetime.class == DateTime
data.to_datetime.class
data.to_datetime.class == 'DateTime'
data.to_datetime.class 
data.to_datetime.class == 'datetime'
data.to_datetime.class == 'datetiem'
(data+"16.07").to_datetime
(data+"16:07").to_datetime
data.to_datetime.DIOCANE
data.to_datetime.date
data.to_datetime
data.class
h
data
dt
q
merged_t_slots
q
res
c
q
res
c
merged_slots
slots
c
res
c
slots
c
slots[1]
slots
c
member
slots
c
slots
member
c
merged_slots
c
res
res.uniq.length
res.uniq
res.length
res
c
slots[3]
slots[1]
slots[2]
slots
c
slots
c
d
quit
c
slots
c
redo
res[member.id] << [mx_date, datetimeF]
res[2].first.uniq
res[2].uniq
res.first.uniq
res.uniq
res.first.last.last
res.first.last
res.first
res.last
res
res[2].last.delete
res[2].last
res[2].last.pop
res[2].last
res[2].last.pop
res[2].last
res[2].last.pop
res
res.last.pop
res.last = nil
add_time(mx_date, duration) < datetimeF
mx_date = datman
datman
res[member.id] << [test.last[1], datetimeF]
add_time(test.last[nd], duration) < datetimeF
